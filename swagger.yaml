openapi: 3.0.0
info:
  title: Evolve2p API
  description: Evolve2p API with Swagger documentation
  version: 1.0.0
servers:
  - url: https://evolve2p-backend.onrender.com
    description: Production server
  - url: http://localhost:5000
    description: Development server
tags:
  - name: Auth
    description: Authentication related endpoints
  - name: User
    description: User related endpoints
  - name: OTP
    description: OTP related endpoints
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT # Optionally specify that it's a JWT token
security:
  - BearerAuth: [] # Apply this security globally to all paths
paths:
  /api/auth/register:
    post:
      tags:
        - Auth
      summary: Registers a new user.
      description: This endpoint allows you to register a new user by providing a username, password, country, verified, phone, pin and email.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                country:
                  type: string
                verified:
                  type: boolean
                phone:
                  type: string
                email:
                  type: string
              required:
                - username
                - password
                - country
                - verified
                - phone
                - email
      responses:
        "201":
          description: User registered successfully.
        "400":
          description: Invalid input data.
        "500":
          description: Internal server error.
  /api/auth/login:
    post:
      tags:
        - Auth
      summary: Logs in a user.
      description: This endpoint allows you to log in a user by providing a email and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        "200":
          description: User logged in successfully.
        "400":
          description: Invalid email or password.
        "500":
          description: Internal server error.
  /api/send-otp:
    post:
      tags:
        - OTP
      summary: Sends an OTP to the user's email.
      description: This endpoint allows you to send an OTP to the user's email for verification.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
                - email
      responses:
        "200":
          description: OTP sent successfully.
        "400":
          description: Invalid email.
        "500":
          description: Internal server error.
  /api/verify-email:
    post:
      tags:
        - OTP
      summary: Verifies the OTP sent to the user's email.
      description: This endpoint allows you to verify the OTP sent to the user's email.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                otp:
                  type: string
              required:
                - email
                - password
      responses:
        "200":
          description: OTP verified successfully.
        "400":
          description: Invalid OTP or email.
        "500":
          description: Internal server error.
  /api/forgot-password:
    put:
      tags:
        - User
      summary: Change the user's password.
      description: This endpoint allows you to change the user's password by providing the email and the new password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        "200":
          description: Password updated successfully.
        "400":
          description: Invalid email or password.
        "500":
          description: Internal server error.
  /api/check-email-exist:
    post:
      tags:
        - User
      summary: Checks if the email exists in the database.
      description: This endpoint allows you to check if the email exists in the database.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
                - email
      responses:
        "200":
          description: Email exists.
        "404":
          description: Email does not exist.
        "500":
          description: Internal server error.
  /api/check-username-exist:
    post:
      tags:
        - User
      summary: Checks if the username exists in the database.
      description: This endpoint allows you to check if the username exists in the database.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
              required:
                - username
      responses:
        "200":
          description: Username exists.
        "404":
          description: Username does not exist.
        "500":
          description: Internal server error.
  /api/get-user:
    post:
      tags:
        - User
      security:
        - BearerAuth: [] # This security is applied to this specific endpoint
      summary: Gets the user data.
      description: This endpoint allows you to get the user data by providing the user Email.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
                - email
      parameters:
        - in: header
          name: Authorization
          description: Bearer token for authentication
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User data retrieved successfully.
        "404":
          description: User not found.
        "500":
          description: Internal server error.
  /api/update-user:
    put:
      tags:
        - User
      security:
        - BearerAuth: [] # This security is applied to this specific endpoint
      summary: Updates the user data.
      description: This endpoint allows you to update the user data by providing the user Email and the new data.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                username:
                  type: string
                password:
                  type: string
                country:
                  type: string
                verified:
                  type: boolean
                phone:
                  type: string
              required:
                - email
      parameters:
        - in: header
          name: Authorization
          description: Bearer token for authentication
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User data updated successfully.
        "400":
          description: Invalid input data.
        "404":
          description: User not found.
        "500":
          description: Internal server error.
  /api/check-token:
    post:
      summary: Checks if the token is valid.
      description: This endpoint allows you to check if the token is valid.
      parameters:
        - in: header
          name: Authorization
          description: Bearer token for authentication
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Token is valid.
        "401":
          description: Token is invalid.
        "500":
          description: Internal server error.
  /api/check-pin:
    post:
      tags:
        - User
      summary: Checks if the pin is valid.
      description: This endpoint allows you to check if the pin is valid.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pin:
                  type: string
                email:
                  type: string
              required:
                - pin
                - email
      responses:
        "200":
          description: Pin is valid.
        "401":
          description: Pin is invalid.
        "500":
          description: Internal server error.
  /api/delete-account:
    delete:
      tags:
        - User
      security:
        - BearerAuth: [] # This security is applied to this specific endpoint
      summary: Deletes the user account.
      description: This endpoint allows you to delete the user account by providing the user Email.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
                - email
      parameters:
        - in: header
          name: Authorization
          description: Bearer token for authentication
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Account deleted successfully.
        "404":
          description: Provide an Email address.
        "400":
          description: Email provided do not exist.
        "500":
          description: Internal server error.
  /api/change-password:
    put:
      tags:
        - User
      security:
        - BearerAuth: [] # This security is applied to this specific endpoint
      summary: Changes the user's password.
      description: This endpoint allows you to change the user's password by providing the user Email and the new password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                currentPassword:
                  type: string
                newPassword:
                  type: string
              required:
                - current_password
                - new_password
      parameters:
        - in: header
          name: Authorization
          description: Bearer token for authentication
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Password updated successfully.
        "400":
          description: User not found.
        "404":
          description: Provide current and new password.
        "500":
          description: Internal server error.
  /api/kyc-get-link:
    post:
      tags:
        - User
      security:
        - BearerAuth: [] # This security is applied to this specific endpoint
      summary: Gets the KYC link for the user.
      description: This endpoint allows you to get the KYC link for the user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: KYC link retrieved successfully.
        "404":
          description: User not found.
        "500":
          description: Internal server error.
  /api/kyc-verification:
    post:
      tags:
        - User
      security:
        - BearerAuth: [] # This security is applied to this specific endpoint
      summary: Verifies the KYC for the user.
      description: This endpoint allows you to verify the KYC for the user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                inquiry_id:
                  type: object
              required:
                - inquiry_id
      responses:
        "200":
          description: KYC verified successfully.
        "404":
          description: User not found.
        "500":
          description: Internal server error.
  /api/generate-secrete:
    post:
      tags:
        - User
      security:
        - BearerAuth: [] # This security is applied to this specific endpoint
      summary: Generates a secret key for the user.
      description: This endpoint allows you to generate a secret key for the user for 2fa authentication.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      parameters:
        - in: header
          name: Authorization
          description: Bearer token for authentication
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Secret key generated successfully.
        "404":
          description: User not found.
        "500":
          description: Internal server error.
  /api/verify-secrete:
    post:
      tags:
        - User
      security:
        - BearerAuth: [] # This security is applied to this specific endpoint
      summary: Verifies the secret key for the user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
              required:
                - token
      parameters:
        - in: header
          name: Authorization
          description: Bearer token for authentication
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Token verified successfully.
        "404":
          description: User not found.
        "500":
          description: Internal server error.
  /api/swap:
    post:
      summary: Swap cryptocurrency between two user wallets
      description: Performs a crypto swap by converting an amount from one coin to another for an authenticated user.
      tags:
        - Swap
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - fromCoin
                - toCoin
                - fromAmount
              properties:
                fromCoin:
                  type: string
                  example: BTC
                  description: The coin to swap from.
                toCoin:
                  type: string
                  example: USDT
                  description: The coin to swap to.
                fromAmount:
                  type: number
                  example: 0.05
                  description: The amount to convert.
      responses:
        "200":
          description: Swap completed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Swap completed
                  data:
                    type: object
                    properties:
                      fromCoin:
                        type: string
                        example: BTC
                      toCoin:
                        type: string
                        example: USDT
                      fromAmount:
                        type: number
                        example: 0.05
                      toAmount:
                        type: number
                        example: 3200.75
        "400":
          description: Invalid request or insufficient balance.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Missing required fields or insufficient balance
        "404":
          description: User or wallet not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Wallets for BTC or USDT not found
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Internal server error
  /api/transfer:
    post:
      summary: Send cryptocurrency to a wallet or username
      description: |
        Performs an internal or on-chain crypto transfer for an authenticated user.
        The system automatically detects if the destination address belongs to an internal user.
      tags:
        - Transfer
      security:
        - bearerAuth: []
      requestBody:
        required: true
        description: Transfer request payload
        content:
          application/json:
            schema:
              type: object
              required:
                - toAddress
                - amount
                - coin
              properties:
                toAddress:
                  type: string
                  example: 0xAbC1234ef5678901234567890abcdef123456789
                  description: |
                    The recipient username or wallet address (internal or on-chain).
                amount:
                  type: number
                  example: 0.05
                  description: Amount to send.
                coin:
                  type: string
                  example: BTC
                  description: |
                    The cryptocurrency symbol (e.g., BTC, ETH, USDT, USDC).
      responses:
        "200":
          description: Transfer successful (internal or on-chain).
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: On-chain transfer successful
                  txId:
                    type: string
                    example: 0x9f8b12c3de4f56a7b8c9d0e1a2b3c4d5e6f7a8b9c0d1e2f3
                    description: Transaction hash (for on-chain transfers only).
        "400":
          description: Bad request (missing fields, insufficient balance, or unsupported currency).
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Missing fields or unsupported currency
        "404":
          description: Wallet not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Sender wallet not found
        "500":
          description: Internal server error or failed transaction.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Transfer failed
  /api/trades/cancel/{id}:
    post:
      summary: Cancel a pending trade
      description: |
        Cancels a pending trade and refunds the seller’s escrowed funds.  
        Only the buyer or seller involved in the trade can cancel while status is **PENDING** and not marked as paid.
      tags:
        - Trades
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the trade to cancel.
          schema:
            type: string
            example: "clx9bhsz2001a0t2z5w2w5t6r"
      responses:
        "200":
          description: Trade successfully canceled and funds returned to seller.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Trade canceled and funds returned.
                  trade:
                    type: object
                    description: Updated trade details after cancellation.
                    properties:
                      id:
                        type: string
                        example: clx9bhsz2001a0t2z5w2w5t6r
                      status:
                        type: string
                        example: CANCELLED
                      amountCrypto:
                        type: string
                        example: "0.005"
                      buyer:
                        type: object
                        properties:
                          id:
                            type: string
                            example: clx9b9k1v0003a0t2zgbr9cjp
                          username:
                            type: string
                            example: buyer123
                      seller:
                        type: object
                        properties:
                          id:
                            type: string
                            example: clx9b9k1v0004a0t2zgbr9cjp
                          username:
                            type: string
                            example: seller456
        "400":
          description: Invalid trade status or cannot cancel at current stage.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Cannot cancel at this stage
        "403":
          description: User not authorized to cancel this trade.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Not allowed
        "404":
          description: Trade not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Trade not found
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Internal server error
